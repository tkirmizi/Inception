run	imagei calistirir container yapar.
	-d detach
	-i terminal acar
	--name isim verdirir
	-p local host hangi portta calisacagini belirleme
	-v volume verme, -v <volumename>:<folder>

build	create image from Dockerfile
docker	images -> image gorme
docker ps -> container gorme
	-a calisip bitenleri de gorme
docker exec <container id> bash	to see inside container
	-it 
docker rm $(docker ps -a -q -f status=exited) or docker container prune 	 hepsinden cikma

VOLUME
	docker volume create <volumename>
	docker volume ls
	docker inspect <volumename>, mountpount volume yapilan dosyayi gosterir
	once bir volume ile bir imageyi'nin bir folderini container olustururken sync yaptik. sonra yeni, baska bir imagenin nin folderini ayni volume
	ile match yaparsak birinde yapilan degisiklik digerini etkiler. ayni o ortak dosya olur.

[]				->executable form
docker commit	->calisan dockerin kopyasini olusturma
docker-compose up -d
docker-compose down
	-v volumeleri de siler



Base images-> Ubuntu debian etc

DOCKERFILE
	docker build -t <name>:<tag> .		-> -f ile Dockerfile konumu belirtilebilir orda degilsek.
	FROM	-> baseimage
	RUN		-> calisirkenki parametreler
	WORKDIR
	COPY
	EXPOSE	-> port number
	CMD		-> calistiktan sonraki parametre
	cmd vs entrypoint, entrypoint daha guclu

COMPOSE
	3 baslik var.
	Services 
		images, restart, ports, links, environment, depend_on, volumes
	Network
		Host: ana makinenin portu ag olarak kullanilir. bridge gore daha hizlidir. --network=host
		Bridge: bu tur sayesinde containerlar kendi aralarinda haberlesirler. varsayilan ag turudur. dis dunyaya eririm icin NAT kullanir
		Overlay, Macvlan
	Volumes
		bind mount: Ana makinedeki bir dosya docker'a baglanir. ornegin
			volume:
				- ./myfolder:/usr/share/nginx/html -> burda ana pc'deki my folder container icindeki html'e baglanir.
		named mount: docker icinde bir dizin olusturulur. ana makinede bir dosyaya baglanmaz. ornegin
			volume:
				- newFolderForVolume:/users/sudo/passwords -> newFolderForVolume olusturulur ve passwords ile baglanir.

	up: Create and start containers
	down: Stop and remove containers, networks, images, and volumes
	start: Start existing containers
	stop: Stop running containers
	restart: Restart running containers
	build: Build images
	ps: List containers
	logs: View output from containers
	exec: Run a command in a running container
	pull: Pull images from a registry
	push: Push images to a registry

MariaDb		-> bir Mysql alternatifidir.
Wordpress
Fastcgi		-> FastCGI, web sunucularının PHP gibi dinamik dilleri daha hızlı çalıştırmasını sağlayan bir protokoldür.
(Common Gateway Interface )
nginx		-> web sunucusu. Büyük sitelerde Apache’ye alternatif olarak kullanılır.
cURL		-> HTTP, HTTPS, FTP gibi protokoller üzerinden veri transferi yapmaya yarayan bir araçtır. Terminal üzerinden web istekleri göndermek, dosya indirmek veya API’lerle iletişim kurmak için kullanılır.
TLS			-> Internet uzerinden verilen guvenle gitmesini saglayan protokol
OPENSSL		-> Secure Sockets Layer, Kriptografi ama tam da anlamadim.
HTTP		->Hypertext Transfer Protocol
HTTPS		->HTTP Secure (HTTPS) = HTTP over TLS/SSL
9000 ve 3306 portu

TLSv1.2 veya TLSv1.3 ile NGINX nedir ?
php-fpm WordPress nedir ?
apk sadece alpine de var.
APK
	update
	add <package name>
	--no-cache -> on bellege kaydedilmez.

Alpine icindeyken
cat etc/os-release	->alpine surumu
uname -a 			->kernel surumu
df -h				->disk kullanimi
apk info			->yuklu paketler
etc					->sistem yapilandirma dosyalari
dev (device)		->donanim bilesenleri vb var
lib (library)		-> sistem kutuphaneleri
run					-> calisma zamani dosyalarini saklar.
root				->yoneticinin kisisel dosyalari
var (variable)		-> degisken veriler. loglar vb.
all passwords: taha123
docker log <containerName>
Mariadb
	SHOW DATABASES
		info_schema
		mysql -> users info
		sys
		test